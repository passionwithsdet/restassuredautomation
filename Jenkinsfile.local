pipeline {
    agent any
    
    environment {
        JAVA_HOME = tool 'JDK-17'
        MAVEN_HOME = tool 'Maven-3.9'
        
        // Test Configuration
        TEST_ENVIRONMENT = 'jenkins'
        PARALLEL_THREADS = '4'
        TEST_SUITE = 'regression'
        
        // Reporting
        REPORT_PATH = 'target/reports'
        ALLURE_RESULTS = 'target/allure-results'
        ALLURE_REPORT = 'target/allure-report'
    }
    
    tools {
        maven 'Maven-3.9'
        jdk 'JDK-17'
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    triggers {
        pollSCM('H/15 * * * *')  // Poll every 15 minutes
    }
    
    stages {
        stage('Checkout & Setup') {
            steps {
                script {
                    // Checkout code
                    checkout scm
                    
                    // Set up workspace
                    sh '''
                        echo "Setting up workspace..."
                        mkdir -p ${WORKSPACE}/reports
                        mkdir -p ${WORKSPACE}/logs
                        mkdir -p ${WORKSPACE}/artifacts
                    '''
                    
                    // Validate environment
                    sh '''
                        echo "Validating environment..."
                        java -version
                        mvn -version
                    '''
                }
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            sh '''
                                mvn clean test \
                                    -Dtest=**/*Test \
                                    -DexcludedGroups=integration,smoke \
                                    -Dparallel=methods \
                                    -DthreadCount=4
                            '''
                        }
                    }
                }
                
                stage('Integration Tests') {
                    steps {
                        script {
                            sh '''
                                mvn test \
                                    -Dtest=**/*IntegrationTest \
                                    -Dgroups=integration \
                                    -Dparallel=classes \
                                    -DthreadCount=2
                            '''
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        // Archive test reports
                        archiveArtifacts artifacts: '**/target/reports/**/*, **/target/surefire-reports/**/*, **/target/allure-results/**/*', 
                                           allowEmptyArchive: true
                        
                        // Generate and publish Allure report
                        allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: 'target/allure-results']]
                        ])
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        docker build -t enterprise-api-test-framework:${BUILD_NUMBER} .
                        docker tag enterprise-api-test-framework:${BUILD_NUMBER} enterprise-api-test-framework:latest
                    '''
                }
            }
            post {
                always {
                    script {
                        // Archive Docker artifacts
                        archiveArtifacts artifacts: 'Dockerfile, docker-compose.yml', allowEmptyArchive: true
                    }
                }
            }
        }
        
        stage('Quality Gates') {
            steps {
                script {
                    // Test result validation
                    def testResults = currentBuild.getAction(hudson.tasks.junit.TestResultAction.class)
                    if (testResults && testResults.failCount > 0) {
                        echo "Test failures detected: ${testResults.failCount}"
                        // Don't fail the build for test failures in this example
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Cleanup
                sh '''
                    docker system prune -f
                '''
                
                // Archive final artifacts
                archiveArtifacts artifacts: '**/target/**/*, **/reports/**/*, **/logs/**/*', 
                                   allowEmptyArchive: true, 
                                   fingerprint: true
                
                // Publish test results
                publishTestResults testResultsPattern: '**/surefire-reports/*.xml'
                
                // Generate custom report
                sh '''
                    if [ -f run-custom-report.sh ]; then
                        chmod +x run-custom-report.sh
                        ./run-custom-report.sh
                    fi
                '''
            }
        }
        
        success {
            script {
                echo "‚úÖ Build #${env.BUILD_NUMBER} completed successfully!"
                echo "üìä Test Results: ${env.BUILD_URL}testReport/"
                echo "üìà Allure Report: ${env.BUILD_URL}allure/"
            }
        }
        
        failure {
            script {
                echo "‚ùå Build #${env.BUILD_NUMBER} failed!"
                echo "üîç Check console output: ${env.BUILD_URL}console"
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Build #${env.BUILD_NUMBER} is unstable!"
                echo "üìä Check test results: ${env.BUILD_URL}testReport/"
            }
        }
    }
} 